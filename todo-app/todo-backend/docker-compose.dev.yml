version: '3.8'

services:
  todo-backend-dev:
    image: todo-backend-dev
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:3000
    environment: 
      - REDIS_URL=redis
      - MONGO_URL=mongodb://the_username:the_password@mongo/the_database
    container_name: todo-backend-dev # This will name the container

  redis: 
    image: redis
    ports:
      - "6379"
    #The data will be persisted to directory redis_data (add the directory to .gitignore!) of the host machine: 
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./redis_data:/data

  mongo:
    image: mongo
    ports:
     - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root #These variables, used in conjunction, 
      MONGO_INITDB_ROOT_PASSWORD: example #create a new user and set that user's password. 
                                           #This user is created in the admin authentication database 
                                           #and given the role of root, which is a "superuser" role.
      MONGO_INITDB_DATABASE: the_database  #This will tell MongoDB to create a database with that name
    volumes: 
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js #FILE-IN-HOST:FILE-IN-CONTAINER
      - ./mongo_data:/data/db #=bind mount: creates a directory called mongo_data (add the directory to .gitignore!) to your local filesystem and map it into the container as /data/db
      
      #- mongo_data:/data/db #=named volume: does the same as a bind mount but the location is managed by Docker
#volumes:
  #mongo_data: